# -*- coding: utf-8 -*-
"""Project v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XhFPZKKU8oFCCOIwD8kXUutT3dCJuPUg
"""

import numpy as np
import pandas as pd
from scipy import stats

df = pd.read_csv("sales_data.csv.csv")

overall_revenue = df['Revenue'].sum()
print("Overall Revenue:", overall_revenue)

revenue_by_year = df.groupby('Year')['Revenue'].sum()
print("Revenue by Year:\n", revenue_by_year)

average_quantity_per_month = df.groupby('Month')['Quantity'].sum()
print("Average Quantity Sold per Month:\n", average_quantity_per_month)

customer_age_distribution = df['Customer Age'].value_counts()
print("Customer Age Distribution:\n", customer_age_distribution)

top_selling_categories = df.groupby('Product Category')['Quantity'].sum().sort_values(ascending=False)
print("Top-Selling Product Categories:\n", top_selling_categories)

average_unit_cost_by_category = df.groupby('Product Category')['Unit Cost'].mean()
print("Average Unit Cost by Product Category:\n", average_unit_cost_by_category)

average_unit_price_by_category = df.groupby('Product Category')['Unit Price'].mean()
print("Average Unit Price by Product Category:\n", average_unit_price_by_category)

total_cost_revenue_by_category = df.groupby('Product Category').agg({'Cost': 'sum', 'Revenue': 'sum'})
print("Total Cost and Revenue by Product Category:\n", total_cost_revenue_by_category)

z_scores = np.abs(stats.zscore(df[['Quantity', 'Unit Price']]))
outliers = df[(z_scores > 3).any(axis=1)]
print("Outliers in Quantity or Unit Price:\n", outliers)

most_common_sub_category = df['Sub Category'].mode()[0]
print("Most Common Product Sub-Category Sold:", most_common_sub_category)

revenue_by_gender = df.groupby('Customer Gender')['Revenue'].sum()
print("Revenue by Customer Gender:\n", revenue_by_gender)

highest_revenue_states = df.groupby('State')['Revenue'].sum().sort_values(ascending=False)
print("Highest Revenue-Generating States:\n", highest_revenue_states)

average_quantity_per_sub_category = df.groupby('Sub Category')['Quantity'].mean()
print("Average Quantity per Product Sub-Category:\n", average_quantity_per_sub_category)

sales_quantity_by_year = df.groupby('Year')['Quantity'].sum()
print("Sales Quantity by Year:\n", sales_quantity_by_year)

average_unit_cost_by_state = df.groupby('State')['Unit Cost'].mean()
print("Average Unit Cost by State:\n", average_unit_cost_by_state)

average_unit_price_by_state = df.groupby('State')['Unit Price'].mean()
print("Average Unit Price by State:\n", average_unit_price_by_state)

monthly_sales = df.groupby('Month')['Quantity'].sum()
print("Monthly Sales Quantity:\n", monthly_sales)

total_revenue_by_country = df.groupby('Country')['Revenue'].sum()
print("Total Revenue by Country:\n", total_revenue_by_country)

correlation_age_revenue = df['Customer Age'].corr(df['Revenue'])
print("Correlation Between Customer Age and Revenue:", correlation_age_revenue)

quantity_sold_category_sub_category = df.groupby(['Product Category', 'Sub Category'])['Quantity'].sum()
print("Quantity Sold by Product Category and Sub-Category:\n", quantity_sold_category_sub_category)

customer_age_distribution_by_gender = df.groupby('Customer Gender')['Customer Age'].value_counts()
print("Customer Age Distribution by Gender:\n", customer_age_distribution_by_gender)

df['Moving Average'] = df['Revenue'].rolling(window=3).mean()
print("Revenue with Moving Average:\n", df[['Revenue', 'Moving Average']])

percentage_contribution = (df.groupby('Product Category')['Revenue'].sum() / df['Revenue'].sum()) * 100
print("Percentage Contribution of Product Category to Total Revenue:\n", percentage_contribution)

average_unit_cost_by_country = df.groupby('Country')['Unit Cost'].mean()
print("Average Unit Cost by Country:\n", average_unit_cost_by_country)

average_unit_price_by_country = df.groupby('Country')['Unit Price'].mean()
print("Average Unit Price by Country:\n", average_unit_price_by_country)

total_revenue_year_month = df.groupby(['Year', 'Month'])['Revenue'].sum()
print("Total Revenue by Year and Month:\n", total_revenue_year_month)

repeat_purchases = df.groupby('Customer Age').filter(lambda x: len(x) > 1)
print("Repeat Purchases (Customer Age with Multiple Purchases):\n", repeat_purchases)

average_revenue_per_customer_state = df.groupby('State')['Revenue'].mean()
print("Average Revenue per Customer by State:\n", average_revenue_per_customer_state)

revenue_by_country = df.groupby('Country')['Revenue'].describe()
print("Revenue Statistics by Country:\n", revenue_by_country)

correlation_unit_price_quantity = df['Unit Price'].corr(df['Quantity'])
print("Correlation Between Unit Price and Quantity Sold:", correlation_unit_price_quantity)

z_scores_age = np.abs(stats.zscore(df['Customer Age']))
outliers_age = df[(z_scores_age > 3)]
print("Outliers in Customer Age:\n", outliers_age)

average_revenue_per_category = df.groupby('Product Category')['Revenue'].mean()
print("Average Revenue per Product Category:\n", average_revenue_per_category)

revenue_by_month_category = df.groupby(['Month', 'Product Category'])['Revenue'].sum()
print("Revenue by Month and Product Category:\n", revenue_by_month_category)

average_unit_cost_by_year = df.groupby('Year')['Unit Cost'].mean()
print("Average Unit Cost by Year:\n", average_unit_cost_by_year)

average_unit_price_by_year = df.groupby('Year')['Unit Price'].mean()
print("Average Unit Price by Year:\n", average_unit_price_by_year)

revenue_by_gender_trend = df.groupby(['Year', 'Customer Gender'])['Revenue'].sum()
print("Revenue Trend by Gender Over Years:\n", revenue_by_gender_trend)

total_revenue_by_sub_category = df.groupby('Sub Category')['Revenue'].sum()
print("Total Revenue by Product Sub-Category:\n", total_revenue_by_sub_category)

correlation_quantity_unit_price = df['Quantity'].corr(df['Unit Price'])
print("Correlation Between Quantity and Unit Price:", correlation_quantity_unit_price)

average_revenue_per_month = df.groupby('Month')['Revenue'].mean()
print("Average Revenue per Month:\n", average_revenue_per_month)

customer_age_distribution_by_state = df.groupby('State')['Customer Age'].value_counts()
print("Customer Age Distribution by State:\n", customer_age_distribution_by_state)

revenue_by_year_state = df.groupby(['Year', 'State'])['Revenue'].sum()
print("Revenue by Year and State:\n", revenue_by_year_state)

average_revenue_per_customer_country = df.groupby('Country')['Revenue'].mean()
print("Average Revenue per Customer by Country:\n", average_revenue_per_customer_country)

z_scores_cost_revenue = np.abs(stats.zscore(df[['Cost', 'Revenue']]))
outliers_cost_revenue = df[(z_scores_cost_revenue > 3).any(axis=1)]
print("Outliers in Cost and Revenue:\n", outliers_cost_revenue)

quantity_sold_by_month = df.groupby('Month')['Quantity'].sum()
print("Quantity Sold by Month:\n", quantity_sold_by_month)

total_revenue_sub_category_year = df.groupby(['Sub Category', 'Year'])['Revenue'].sum()
print("Total Revenue by Sub-Category and Year:\n", total_revenue_sub_category_year)

average_unit_price_by_sub_category = df.groupby('Sub Category')['Unit Price'].mean()
print("Average Unit Price by Sub-Category:\n", average_unit_price_by_sub_category)

rolling_average_revenue = df['Revenue'].rolling(window=3).mean()
print("Rolling Average of Revenue:\n", rolling_average_revenue)

average_revenue_per_customer_category = df.groupby('Product Category')['Revenue'].mean()
print("Average Revenue per Customer by Product Category:\n", average_revenue_per_customer_category)

quantity_sold_by_state_category = df.groupby(['State', 'Product Category'])['Quantity'].sum()
print("Quantity Sold by State and Product Category:\n", quantity_sold_by_state_category)

total_revenue_state_category = df.groupby(['State', 'Product Category'])['Revenue'].sum()
print("Total Revenue by State and Product Category:\n", total_revenue_state_category)

correlation_unit_cost_unit_price = df['Unit Cost'].corr(df['Unit Price'])
print("Correlation Between Unit Cost and Unit Price:", correlation_unit_cost_unit_price)

quantity_sold_by_year_category = df.groupby(['Year', 'Product Category'])['Quantity'].sum()
print("Quantity Sold by Year and Product Category:\n", quantity_sold_by_year_category)

average_unit_cost_by_month = df.groupby('Month')['Unit Cost'].mean()
print("Average Unit Cost by Month:\n", average_unit_cost_by_month)

average_unit_price_by_month = df.groupby('Month')['Unit Price'].mean()
print("Average Unit Price by Month:\n", average_unit_price_by_month)

column1_unique_values = df['Column1'].unique()
print("Unique Values in Column1:\n", column1_unique_values)



import numpy as np
import pandas as pd
from scipy import stats

df = pd.read_csv("sales_data.csv.csv")
overall_revenue = df['Revenue'].sum()
print("Overall Revenue:", overall_revenue)


revenue_by_year = df.groupby('Year')['Revenue'].sum()
print("Revenue by Year:\n", revenue_by_year)

average_quantity_per_month = df.groupby('Month')['Quantity'].mean()
print("Average Quantity Sold per Month:\n", average_quantity_per_month)

top_selling_categories = df.groupby('Product Category')['Quantity'].sum().sort_values(ascending=False)
print("Top-Selling Product Categories:\n", top_selling_categories)

customer_age_distribution = df['Customer Age'].value_counts()
print("Customer Age Distribution:\n", customer_age_distribution)

average_unit_cost_by_category = df.groupby('Product Category')['Unit Cost'].mean()
print("Average Unit Cost by Product Category:\n", average_unit_cost_by_category)

average_unit_price_by_category = df.groupby('Product Category')['Unit Price'].mean()
print("Average Unit Price by Product Category:\n", average_unit_price_by_category)

total_cost_revenue_by_category = df.groupby('Product Category').agg({'Cost': 'sum', 'Revenue': 'sum'})
print("Total Cost and Revenue by Product Category:\n", total_cost_revenue_by_category)

z_scores = np.abs(stats.zscore(df[['Quantity', 'Unit Price']]))
outliers = df[(z_scores > 3).any(axis=1)]
print("Outliers in Quantity or Unit Price:\n", outliers)

most_common_sub_category = df['Sub Category'].mode()[0]
print("Most Common Product Sub-Category Sold:", most_common_sub_category)

revenue_by_gender = df.groupby('Customer Gender')['Revenue'].sum()
print("Revenue by Customer Gender:\n", revenue_by_gender)

highest_revenue_states = df.groupby('State')['Revenue'].sum().sort_values(ascending=False)
print("Highest Revenue-Generating States:\n", highest_revenue_states)

average_quantity_per_sub_category = df.groupby('Sub Category')['Quantity'].mean()
print("Average Quantity per Product Sub-Category:\n", average_quantity_per_sub_category)

sales_quantity_by_year = df.groupby('Year')['Quantity'].sum()
print("Sales Quantity by Year:\n", sales_quantity_by_year)

average_unit_cost_by_state = df.groupby('State')['Unit Cost'].mean()
print("Average Unit Cost by State:\n", average_unit_cost_by_state)

average_unit_price_by_state = df.groupby('State')['Unit Price'].mean()
print("Average Unit Price by State:\n", average_unit_price_by_state)

monthly_sales = df.groupby('Month')['Quantity'].sum()
print("Monthly Sales Quantity:\n", monthly_sales)

total_revenue_by_country = df.groupby('Country')['Revenue'].sum()
print("Total Revenue by Country:\n", total_revenue_by_country)

correlation_age_revenue = df['Customer Age'].corr(df['Revenue'])
print("Correlation Between Customer Age and Revenue:", correlation_age_revenue)

quantity_sold_category_sub_category = df.groupby(['Product Category', 'Sub Category'])['Quantity'].sum()
print("Quantity Sold by Product Category and Sub-Category:\n", quantity_sold_category_sub_category)

customer_age_distribution_by_gender = df.groupby('Customer Gender')['Customer Age'].value_counts()
print("Customer Age Distribution by Gender:\n", customer_age_distribution_by_gender)

df['Moving Average'] = df['Revenue'].rolling(window=3).mean()
print("Revenue with Moving Average:\n", df[['Revenue', 'Moving Average']])

percentage_contribution = (df.groupby('Product Category')['Revenue'].sum() / df['Revenue'].sum()) * 100
print("Percentage Contribution of Product Category to Total Revenue:\n", percentage_contribution)

average_unit_cost_by_country = df.groupby('Country')['Unit Cost'].mean()
print("Average Unit Cost by Country:\n", average_unit_cost_by_country)

average_unit_price_by_country = df.groupby('Country')['Unit Price'].mean()
print("Average Unit Price by Country:\n", average_unit_price_by_country)

total_revenue_year_month = df.groupby(['Year', 'Month'])['Revenue'].sum()
print("Total Revenue by Year and Month:\n", total_revenue_year_month)

repeat_purchases = df.groupby('Customer Age').filter(lambda x: len(x) > 1)
print("Repeat Purchases (Customer Age with Multiple Purchases):\n", repeat_purchases)

average_revenue_per_customer_state = df.groupby('State')['Revenue'].mean()
print("Average Revenue per Customer by State:\n", average_revenue_per_customer_state)

revenue_by_country = df.groupby('Country')['Revenue'].describe()
print("Revenue Statistics by Country:\n", revenue_by_country)

correlation_unit_price_quantity = df['Unit Price'].corr(df['Quantity'])
print("Correlation Between Unit Price and Quantity Sold:", correlation_unit_price_quantity)

z_scores_age = np.abs(stats.zscore(df['Customer Age']))
outliers_age = df[(z_scores_age > 3)]
print("Outliers in Customer Age:\n", outliers_age)

average_revenue_per_category = df.groupby('Product Category')['Revenue'].mean()
print("Average Revenue per Product Category:\n", average_revenue_per_category)

revenue_by_month_category = df.groupby(['Month', 'Product Category'])['Revenue'].sum()
print("Revenue by Month and Product Category:\n", revenue_by_month_category)

average_unit_cost_by_year = df.groupby('Year')['Unit Cost'].mean()
print("Average Unit Cost by Year:\n", average_unit_cost_by_year)

average_unit_price_by_year = df.groupby('Year')['Unit Price'].mean()
print("Average Unit Price by Year:\n", average_unit_price_by_year)

revenue_by_gender_trend = df.groupby(['Year', 'Customer Gender'])['Revenue'].sum()
print("Revenue Trend by Gender Over Years:\n", revenue_by_gender_trend)

total_revenue_by_sub_category = df.groupby('Sub Category')['Revenue'].sum()
print("Total Revenue by Product Sub-Category:\n", total_revenue_by_sub_category)

correlation_quantity_unit_price = df['Quantity'].corr(df['Unit Price'])
print("Correlation Between Quantity and Unit Price:", correlation_quantity_unit_price)

average_revenue_per_month = df.groupby('Month')['Revenue'].mean()
print("Average Revenue per Month:\n", average_revenue_per_month)

customer_age_distribution_by_state = df.groupby('State')['Customer Age'].value_counts()
print("Customer Age Distribution by State:\n", customer_age_distribution_by_state)

revenue_by_year_state = df.groupby(['Year', 'State'])['Revenue'].sum()
print("Revenue by Year and State:\n", revenue_by_year_state)

average_revenue_per_customer_country = df.groupby('Country')['Revenue'].mean()
print("Average Revenue per Customer by Country:\n", average_revenue_per_customer_country)

z_scores_cost_revenue = np.abs(stats.zscore(df[['Cost', 'Revenue']]))
outliers_cost_revenue = df[(z_scores_cost_revenue > 3).any(axis=1)]
print("Outliers in Cost and Revenue:\n", outliers_cost_revenue)

quantity_sold_by_month = df.groupby('Month')['Quantity'].sum()
print("Quantity Sold by Month:\n", quantity_sold_by_month)

total_revenue_sub_category_year = df.groupby(['Sub Category', 'Year'])['Revenue'].sum()
print("Total Revenue by Sub-Category and Year:\n", total_revenue_sub_category_year)

average_unit_price_by_sub_category = df.groupby('Sub Category')['Unit Price'].mean()
print("Average Unit Price by Sub-Category:\n", average_unit_price_by_sub_category)

rolling_average_revenue = df['Revenue'].rolling(window=3).mean()
print("Rolling Average of Revenue:\n", rolling_average_revenue)

average_revenue_per_customer_category = df.groupby('Product Category')['Revenue'].mean()
print("Average Revenue per Customer by Product Category:\n", average_revenue_per_customer_category)

quantity_sold_by_state_category = df.groupby(['State', 'Product Category'])['Quantity'].sum()
print("Quantity Sold by State and Product Category:\n", quantity_sold_by_state_category)

total_revenue_state_category = df.groupby(['State', 'Product Category'])['Revenue'].sum()
print("Total Revenue by State and Product Category:\n", total_revenue_state_category)

correlation_unit_cost_unit_price = df['Unit Cost'].corr(df['Unit Price'])
print("Correlation Between Unit Cost and Unit Price:", correlation_unit_cost_unit_price)

quantity_sold_by_year_category = df.groupby(['Year', 'Product Category'])['Quantity'].sum()
print("Quantity Sold by Year and Product Category:\n", quantity_sold_by_year_category)

average_unit_cost_by_month = df.groupby('Month')['Unit Cost'].mean()
print("Average Unit Cost by Month:\n", average_unit_cost_by_month)

average_unit_price_by_month = df.groupby('Month')['Unit Price'].mean()
print("Average Unit Price by Month:\n", average_unit_price_by_month)

column1_unique_values = df['Column1'].unique()
print("Unique Values in Column1:\n", column1_unique_values)

import plotly.graph_objs as go
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import pandas as pd

if len(daily_revenue) > 1:
    # Fit the Exponential Smoothing model
    model = ExponentialSmoothing(daily_revenue, trend="add", seasonal=None)
    fit_model = model.fit()
    forecast = fit_model.forecast(15)

    # Prepare historical and forecast data
    recent_revenue = daily_revenue[-60:]
    forecast_index = pd.date_range(start=recent_revenue.index[-1] + pd.Timedelta(days=1), periods=15)

    # Create Plotly traces
    trace_actual = go.Scatter(
        x=recent_revenue.index,
        y=recent_revenue.values,
        mode='lines',
        name='Recent Revenue',
        line=dict(color='blue')
    )

    trace_forecast = go.Scatter(
        x=forecast_index,
        y=forecast.values,
        mode='lines',
        name='15-Day Forecast',
        line=dict(color='red', dash='dash')
    )

    layout = go.Layout(
        title="15-Day Revenue Forecast",
        xaxis=dict(title='Date'),
        yaxis=dict(title='Revenue'),
        hovermode='x unified',
        legend=dict(title='Legend')
    )

    fig = go.Figure(data=[trace_actual, trace_forecast], layout=layout)
    fig.show()

    print("15-Day Revenue Forecast:\n", forecast)
else:
    print("Not enough valid daily revenue data for forecasting.")

import plotly.graph_objs as go
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import pandas as pd

if len(daily_revenue) > 1:
    # Fit the Exponential Smoothing model
    model = ExponentialSmoothing(daily_revenue, trend="add", seasonal=None)
    fit_model = model.fit()
    forecast = fit_model.forecast(15)

    # Prepare historical and forecast data
    recent_revenue = daily_revenue[-60:]
    forecast_index = pd.date_range(start=recent_revenue.index[-1] + pd.Timedelta(days=1), periods=15)

    # Create Plotly traces
    trace_actual = go.Scatter(
        x=recent_revenue.index,
        y=recent_revenue.values,
        mode='lines',
        name='Recent Revenue',
        line=dict(color='blue')
    )

    trace_forecast = go.Scatter(
        x=forecast_index,
        y=forecast.values,
        mode='lines',
        name='15-Day Forecast',
        line=dict(color='red', dash='dash')
    )

    layout = go.Layout(
        title="15-Day Revenue Forecast",
        xaxis=dict(title='Date'),
        yaxis=dict(title='Revenue'),
        hovermode='x unified',
        legend=dict(title='Legend')
    )

    fig = go.Figure(data=[trace_actual, trace_forecast], layout=layout)
    fig.show()

    print("15-Day Revenue Forecast:\n", forecast)
else:
    print("Not enough valid daily revenue data for forecasting.")

import plotly.express as px
import plotly.graph_objects as go

# Bar Plot
fig1 = px.bar(revenue_by_year.reset_index(),
              x='Year',
              y=revenue_by_year.name if revenue_by_year.name else revenue_by_year.columns[-1],
              title="Revenue by Year",
              labels={"Year": "Year", revenue_by_year.name: "Revenue"},
              color_discrete_sequence=['skyblue'])
fig1.show()

fig2 = px.line(monthly_sales.reset_index(),
               x='Month',
               y=monthly_sales.name if monthly_sales.name else monthly_sales.columns[-1],
               markers=True,
               title="Monthly Quantity Sold",
               labels={"Month": "Month", monthly_sales.name: "Quantity"},
               color_discrete_sequence=['orange'])
fig2.show()

top_states = highest_revenue_states.head(10).reset_index()

fig3 = px.bar(top_states,
              x=top_states.columns[1],
              y=top_states.columns[0],
              orientation='h',
              title="Top 10 Revenue-Generating States",
              labels={top_states.columns[1]: "Revenue", top_states.columns[0]: "State"},
              color_discrete_sequence=['green'])
fig3.update_layout(yaxis=dict(autorange="reversed"))  # Highest at the top
fig3.show()

import pandas as pd
import numpy as np

corr_matrix = df.corr(numeric_only=True)

fig4 = go.Figure(data=go.Heatmap(
    z=corr_matrix.values,
    x=corr_matrix.columns,
    y=corr_matrix.index,
    colorscale='RdBu',
    zmin=-1,
    zmax=1,
    text=np.round(corr_matrix.values, 2),
    hoverinfo='text',
    showscale=True,
    colorbar=dict(title="Correlation")
))
fig4.update_layout(title="Correlation Matrix", width=800, height=600)
fig4.show()

import plotly.graph_objs as go
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import pandas as pd

if len(daily_revenue) > 1:
    # Fit the Exponential Smoothing model
    model = ExponentialSmoothing(daily_revenue, trend="add", seasonal=None)
    fit_model = model.fit()
    forecast = fit_model.forecast(15)

    # Prepare historical and forecast data
    recent_revenue = daily_revenue[-60:]
    forecast_index = pd.date_range(start=recent_revenue.index[-1] + pd.Timedelta(days=1), periods=15)

    # Create Plotly traces
    trace_actual = go.Scatter(
        x=recent_revenue.index,
        y=recent_revenue.values,
        mode='lines',
        name='Recent Revenue',
        line=dict(color='blue')
    )

    trace_forecast = go.Scatter(
        x=forecast_index,
        y=forecast.values,
        mode='lines',
        name='15-Day Forecast',
        line=dict(color='red', dash='dash')
    )

    layout = go.Layout(
        title="15-Day Revenue Forecast",
        xaxis=dict(title='Date'),
        yaxis=dict(title='Revenue'),
        hovermode='x unified',
        legend=dict(title='Legend')
    )

    fig = go.Figure(data=[trace_actual, trace_forecast], layout=layout)
    fig.show()

    print("15-Day Revenue Forecast:\n", forecast)
else:
    print("Not enough valid daily revenue data for forecasting.")